#include <iostream>
#include <memory>
#include <string>
#include "common_types.h"
#include "telemetry/client.h"

#include "analysis/gait_cycle_splitter.h"

#include <torch/script.h>

gait_cycle_splitter s;

double first_tp = 0;

void on_message(const void *d, long len)
{
  sensors_data data;
  memcpy(&data, d, len);

  // series:  FSR_L, FSR_R, acceleration_A, acceleration_B, acceleration_C,
  // gyroscope_A, gyroscope_B, gyroscope_C
  packaged_data points = {
      data.left.heel + data.left.toe,
      data.right.heel + data.right.toe,
      data.a.ax,
      data.a.ay,
      data.a.az,
      data.b.ax,
      data.b.ay,
      data.b.az,
      data.c.ax,
      data.c.ay,
      data.c.az,
      data.a.gx,
      data.a.gy,
      data.a.gz,
      data.b.gx,
      data.b.gy,
      data.b.gz,
      data.c.gx,
      data.c.gy,
      data.c.gz,
  };

  s.add_cycle_points(data.timepoint, data.left.heel, points);

  static bool first = true;
  if (first) {
    first_tp = data.timepoint;
    first = false;
  }
}

int main(int argc, char *argv[])
{
  /*
if (argc != 2) {
  std::cout << "Invalid number of arguments: Requires  only the "
               "address of the streamer server to connect to.";
  return -1;
}
   */

#if 1
  std::string addr = "ws://192.168.1.163:9004";
  tel::client client;
  client.set_message_handler(&on_message);

  client.connect_to(addr);
  client.run_on_thread();

  std::this_thread::sleep_for(std::chrono::seconds(5));
  std::shared_ptr<torch::jit::script::Module> module =
      torch::jit::load("~/Downloads/model.pth");

  while (true) {
    std::this_thread::sleep_for(std::chrono::seconds(1));
    auto last_cycle = s.latest_gait_cycle();

    // Create the input vector
    std::vector<torch::jit::IValue> inputs;

    auto series = s.get_latest_cycle_data();
    for (auto &s : series) {
      std::vector<double> ss;
      ss.assign(s.data(), s.data() + s.size());
      std::vector<double> resampled = resample_series(1 / 0.051, 20, ss);
      for (int j = 0; j < 20; ++j) {
        inputs.push_back(resampled[j]);
      }
    }

    at::Tensor output = module->forward(inputs).toTensor();
    std::cout << output << std::endl;

    printf("%.2lf -- %.2lf\n", last_cycle.first, last_cycle.second);
  }
#else
  auto res = s.getFilteredData(
      1 / 0.051,
      s.getDominantFrequency(
          1 / 0.051,
          {1.171875,    0.9453125,   0.7265625,   0.54296875,  0.369140625,
           0.330078125, 0.232421875, 0.15234375,  0.068359375, 0.03515625,
           0.015625,    0.021484375, 0.0390625,   0.01171875,  0.033203125,
           0.05859375,  0.072265625, 0.078125,    1.2734375,   1.443359375,
           1.693359375, 1.74609375,  1.775390625, 1.78125,     1.78125,
           1.78125,     1.783203125, 1.78515625,  1.78125,     1.78125,
           1.724609375, 1.587890625, 1.333984375, 1.21875,     0.947265625,
           0.57421875,  0.40625,     0.32421875,  0.189453125, 0.04296875,
           0.01171875,  0.025390625, 0.021484375, 0.01171875,  0.01171875,
           0.013671875, 0.01171875,  0.01171875,  0.052734375, 0.0703125,
           0.11328125,  1.255859375, 1.49609375,  1.697265625, 1.734375,
           1.763671875, 1.765625,    1.751953125, 1.720703125, 1.6953125,
           1.67578125,  1.525390625, 1.154296875, 0.3203125,   0.1328125,
           0.06640625,  0.041015625, 0.01171875,  0.01171875,  0.01171875,
           0.01171875,  0.01171875,  0.01171875,  0.01171875,  0.046875,
           0.0546875,   0.0625,      0.134765625, 1.373046875, 1.611328125,
           1.73828125,  1.77734375,  1.787109375, 1.787109375, 1.78125,
           1.76953125,  1.76171875,  1.744140625, 1.66015625,  1.478515625,
           1.12890625,  0.5,         0.1328125,   0.078125,    0.060546875,
           0.013671875, 0.01171875,  0.01171875,  0.01171875,  0.01171875,
           0.013671875, 0.03125,     0.06640625,  0.060546875, 0.056640625,
           0.416015625, 1.021484375, 1.5390625,   1.65625,     1.708984375,
           1.732421875, 1.748046875, 1.744140625, 1.7421875,   1.74609375,
           1.75390625,  1.7421875,   1.59765625,  1.072265625, 0.521484375,
           0.265625,    0.21875,     0.197265625, 0.138671875, 0.080078125,
           0.0546875,   0.0234375,   0.009765625, 0.021484375, 0.009765625,
           0.009765625, 0.009765625, 0.017578125, 0.04296875,  0.03515625,
           0.03515625,  1.1171875,   1.27734375,  1.552734375, 1.673828125,
           1.71875,     1.7421875,   1.7578125,   1.765625,    1.765625,
           1.767578125, 1.75390625,  1.658203125, 1.396484375, 1.125,
           0.73046875,  0.474609375, 0.31640625,  0.2734375,   0.11328125,
           0.01953125,  0.025390625, 0.013671875, 0.013671875, 0.01171875,
           0.05859375,  0.046875,    0.080078125, 0.0625,      1.419921875,
           1.677734375, 1.748046875, 1.7734375,   1.78125,     1.783203125,
           1.78125,     1.779296875, 1.77734375,  1.775390625, 1.765625,
           1.6953125,   1.484375,    1.107421875, 0.744140625, 0.40625,
           0.29296875,  0.3046875,   0.2265625,   0.05078125,  0.013671875,
           0.01171875,  0.01171875,  0.0234375,   0.021484375, 0.048828125,
           0.0625,      0.06640625,  0.064453125, 1.115234375, 1.08984375,
           1.576171875, 1.708984375, 1.736328125, 1.76171875,  1.77734375}),
      {1.171875,    0.9453125,   0.7265625,   0.54296875,  0.369140625,
       0.330078125, 0.232421875, 0.15234375,  0.068359375, 0.03515625,
       0.015625,    0.021484375, 0.0390625,   0.01171875,  0.033203125,
       0.05859375,  0.072265625, 0.078125,    1.2734375,   1.443359375,
       1.693359375, 1.74609375,  1.775390625, 1.78125,     1.78125,
       1.78125,     1.783203125, 1.78515625,  1.78125,     1.78125,
       1.724609375, 1.587890625, 1.333984375, 1.21875,     0.947265625,
       0.57421875,  0.40625,     0.32421875,  0.189453125, 0.04296875,
       0.01171875,  0.025390625, 0.021484375, 0.01171875,  0.01171875,
       0.013671875, 0.01171875,  0.01171875,  0.052734375, 0.0703125,
       0.11328125,  1.255859375, 1.49609375,  1.697265625, 1.734375,
       1.763671875, 1.765625,    1.751953125, 1.720703125, 1.6953125,
       1.67578125,  1.525390625, 1.154296875, 0.3203125,   0.1328125,
       0.06640625,  0.041015625, 0.01171875,  0.01171875,  0.01171875,
       0.01171875,  0.01171875,  0.01171875,  0.01171875,  0.046875,
       0.0546875,   0.0625,      0.134765625, 1.373046875, 1.611328125,
       1.73828125,  1.77734375,  1.787109375, 1.787109375, 1.78125,
       1.76953125,  1.76171875,  1.744140625, 1.66015625,  1.478515625,
       1.12890625,  0.5,         0.1328125,   0.078125,    0.060546875,
       0.013671875, 0.01171875,  0.01171875,  0.01171875,  0.01171875,
       0.013671875, 0.03125,     0.06640625,  0.060546875, 0.056640625,
       0.416015625, 1.021484375, 1.5390625,   1.65625,     1.708984375,
       1.732421875, 1.748046875, 1.744140625, 1.7421875,   1.74609375,
       1.75390625,  1.7421875,   1.59765625,  1.072265625, 0.521484375,
       0.265625,    0.21875,     0.197265625, 0.138671875, 0.080078125,
       0.0546875,   0.0234375,   0.009765625, 0.021484375, 0.009765625,
       0.009765625, 0.009765625, 0.017578125, 0.04296875,  0.03515625,
       0.03515625,  1.1171875,   1.27734375,  1.552734375, 1.673828125,
       1.71875,     1.7421875,   1.7578125,   1.765625,    1.765625,
       1.767578125, 1.75390625,  1.658203125, 1.396484375, 1.125,
       0.73046875,  0.474609375, 0.31640625,  0.2734375,   0.11328125,
       0.01953125,  0.025390625, 0.013671875, 0.013671875, 0.01171875,
       0.05859375,  0.046875,    0.080078125, 0.0625,      1.419921875,
       1.677734375, 1.748046875, 1.7734375,   1.78125,     1.783203125,
       1.78125,     1.779296875, 1.77734375,  1.775390625, 1.765625,
       1.6953125,   1.484375,    1.107421875, 0.744140625, 0.40625,
       0.29296875,  0.3046875,   0.2265625,   0.05078125,  0.013671875,
       0.01171875,  0.01171875,  0.0234375,   0.021484375, 0.048828125,
       0.0625,      0.06640625,  0.064453125, 1.115234375, 1.08984375,
       1.576171875, 1.708984375, 1.736328125, 1.76171875,  1.77734375});

  for (auto j : res) {
    std::cout << j << std::endl;
  }
#endif
}
